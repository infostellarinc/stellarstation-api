/*
 * Copyright 2018 Infostellar, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    dependencies {
        classpath 'org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:5.9.0.202009080501-r'
    }
}

plugins {
    id 'org.ajoberstar.git-publish' version '3.0.0' apply false
}

conda {
    'miniconda-build' {
        packages.addAll('cmake==3.14.0', 'pandoc')
        pythonPackages.addAll('conan==1.37.2', 'grpcio-tools==1.38.0', 'pdoc==7.1.1', 'twine==3.4.1')
    }
}

gcloud {
    clusterBaseName = 'infostellar-api'
    cloudRegion = 'asia-northeast1'
}

allprojects {
    project.group = 'com.stellarstation.api'

    plugins.withId("java") {
      nullaway {
        annotatedPackages.add("com.stellarstation")
      }
    }

    // Work around BOM resolution not working for protobuf configuration.
    plugins.withId("org.curioswitch.gradle-protobuf-plugin") {
        dependencies {
            add("protobuf", "io.grpc:grpc-core:1.33.1")
            add("protobuf", "io.grpc:grpc-protobuf:1.33.1")
            add("protobuf", "io.grpc:grpc-stub:1.33.1")
            add("protobuf", "jakarta.annotation:jakarta.annotation-api:1.3.5")
        }
    }

    plugins.withType(MavenPublishPlugin) {
        afterEvaluate {
            publishing {
                publications {
                    maven(MavenPublication) {
                        from components.java

                        artifactId = project.archivesBaseName

                        pom {
                            licenses {
                                license {
                                    name = 'Apache License, Version 2.0'
                                    url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                                    distribution = 'repo'
                                }
                            }
                            developers {
                                developer {
                                    id = 'istellar'
                                    name = 'Infostellar, Inc.'
                                    email = 'sonatype@istellar.com'
                                    organization = 'Infostellar, Inc.'
                                    organizationUrl = 'https://www.infostellar.net/'
                                }
                            }

                            scm {
                                connection = 'scm:git:git://github.com/infostellarinc/stellarstation-api.git'
                                developerConnection = 'scm:git:ssh://github.com:infostellarinc/stellarstation-api.git'
                                url = 'https://github.com/infostellarinc/stellarstation-api'
                            }
                        }
                    }
                }
            }
        }
    }
}

// To use this task, need to set the following gradle properties:
//   maven.username
//   maven.password
//   signing.keyId
//   signing.password
//   signing.secretKeyRingFile
//   pypi.user
//   pypi.password
//   npm.key
task publishStubs {
    description 'Publishes API stubs (only works for non-snapshot versions)'
    dependsOn ':api:publishMavenPublicationToMavenRepository'
    dependsOn ':stubs:golang:gitPublishCommit'
    dependsOn ':stubs:nodejs:publish'
    dependsOn ':stubs:python:uploadPythonPackage'
}

tasks.checkNodeResolutions.enabled = false
