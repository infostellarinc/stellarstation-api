/*
 * Copyright 2018 Infostellar, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "stellarstation/api/v1/radio/radio.proto";

package stellarstation.api.v1.groundstation;

option go_package = "github.com/infostellarinc/go-stellarstation/api/v1/groundstation";

option java_multiple_files = true;
option java_outer_classname = "GroundStationProto";
option java_package = "com.stellarstation.api.v1.groundstation";

// The public API of StellarStation for use by ground station operators integrating with the
// StellarStation ground network. It is invalid to specify ground station IDs that the operator
// does not own. Only using IDs shown on the StellarStation Console or returned in API responses
// will ensure all inputs are valid.
//
// A pass is a time range where an ground station and satellite can communicate with each other, i.e.,
// the period between Acquisition of Signal (AOS) and Loss of Signal (LOS) of the ground station and
// satellite pair.
//
// A plan is a scheduled pass that will be executed to send and receive data between the ground
// station and satellite during the time range.
service GroundStationService {
  // Adds a new unavailability window to the requested ground station.
  //
  // Existing plans that overlap the unavailability window will be canceled. However, there
  // are cases when the plan cannot be canceled. When this happens, the request will be closed
  // with a 'FAILED_PRECONDITION' status.
  //
  // The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
  // `start_time`, or `end_time` are missing, or 'end_time' is not after 'start_time'.
  rpc AddUnavailabilityWindow (AddUnavailabilityWindowRequest) returns (AddUnavailabilityWindowResponse);

  // Deletes an existing unavailability window of the requested ground station.
  //
  // The request will be closed with an `INVALID_ARGUMENT` status if `window_id` is missing
  // or invalid.
  rpc DeleteUnavailabilityWindow (DeleteUnavailabilityWindowRequest) returns (DeleteUnavailabilityWindowResponse);

  // Lists the plans for a particular ground station.
  //
  // The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
  // `aos_after`, or `aos_before` are missing, or the duration between the two times is longer than
  // 31 days.
  rpc ListPlans (ListPlansRequest) returns (ListPlansResponse);

  // Returns a list of unavailability windows for the requested ground station.
  //
  // The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
  // `start_time`, or `end_time` are missing, or 'end_time' is not after 'start_time'.
  rpc ListUnavailabilityWindows (ListUnavailabilityWindowsRequest) returns (ListUnavailabilityWindowsResponse);
}

//----------------------------------------------------------------------------------------------
// Scheduling APIs.
//----------------------------------------------------------------------------------------------

// Request for the `ListPlans` method.
message ListPlansRequest {
  // The ID of the ground station to list plans for. The ID can be found on the StellarStation
  // Console page for the ground station.
  string ground_station_id = 1;

  // The start time of the range of plans to list (inclusive). Only plans with an Acquisition of
  // Signal (AOS) at or after this time will be returned. It is an error for the duration between
  // `aos_after` and `aos_before` to be longer than 31 days.
  google.protobuf.Timestamp aos_after = 2;

  // The end time of the range of plans to list (exclusive). Only plans with an Acquisition of
  // Signal (AOS) before this time will be returned. It is an error for the duration between
  // `aos_after` and `aos_before` to be longer than 31 days.
  google.protobuf.Timestamp aos_before = 3;
}

// A response from the `ListPlans` method.
message ListPlansResponse {
  // The requested list of plans for the ground station.
  repeated Plan plan = 1;
}

// A scheduled pass. The plan will be executed on its ground station to communicate with its satellite
// during a time range between AOS and LOS, unless explicitly cancelled.
message Plan {
  // The ID of this plan.
  string plan_id = 1;

  // The TLE for the satellite in this plan.
  Tle tle = 2;

  // The time of AOS between the ground station and satellite in this plan.
  google.protobuf.Timestamp aos_time = 3;

  // The time of LOS between the ground station and satellite in this plan.
  google.protobuf.Timestamp los_time = 4;

  // Configuration of the radio device used for downlinking from the satellite. Ground stations will
  // need to configure reception during the plan to match this device.
  radio.RadioDeviceConfiguration downlink_radio_device = 5;

  // Configuration of the radio device used for uplinking to the satellite. Ground stations will
  // need to configure transmission during the plan to match this device.
  radio.RadioDeviceConfiguration uplink_radio_device = 6;
}

// Unparsed TLE data for a satellite - https://en.wikipedia.org/wiki/Two-line_element_set
message Tle {
  // The first line of the TLE. Not a title line.
  string line_1 = 1;

  // The second line of the TLE.
  string line_2 = 2;
}

// A time window during which a ground station is unavailable e.g. for local maintenance.
message UnavailabilityWindow {
  // The ID of the unavailability window.
  string window_id = 1;

  // Start time of the unavailabilty window.
  google.protobuf.Timestamp start_time = 2;

  // End time of the unavailability window.
  google.protobuf.Timestamp end_time = 3;
}

// A request for a list of unavailability windows for the specified ground station that
// fall within the given time range.
message ListUnavailabilityWindowsRequest {
  // ID of the ground station for which to retrieve unavailability windows.
  string ground_station_id = 1;

  // Start time.
  google.protobuf.Timestamp start_time = 2;

  // End time.
  google.protobuf.Timestamp end_time = 3;
}

// A response containing unavailability windows for the requested ground station.
message ListUnavailabilityWindowsResponse {
  // A list of unavailability windows, sorted in ascending order of the start time.
  repeated UnavailabilityWindow window = 1;
}

// A request for adding a new unavailability window for the specified ground station.
message AddUnavailabilityWindowRequest {
  // ID of the ground station to add a new unavailability window.
  string ground_station_id = 1;

  // Start time of the unavailabilty window.
  google.protobuf.Timestamp start_time = 2;

  // End time of the unavailability window.
  google.protobuf.Timestamp end_time = 3;
}

// A response from the 'AddUnavailabilityWindow' method.
message AddUnavailabilityWindowResponse {
  // ID of the new window.
  string window_id = 1;
}

// A request for deleting an existing unavailability window for the specified ground station.
message DeleteUnavailabilityWindowRequest {
  // ID of the unavailability window to delete.
  string window_id = 1;
}

// A response to the request for deleting an existing unavailability window.
message DeleteUnavailabilityWindowResponse {
  // Currently no payload in the response.
}
