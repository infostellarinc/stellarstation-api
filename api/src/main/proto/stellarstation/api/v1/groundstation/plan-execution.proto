/*
 * Copyright 2019 Infostellar, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

import "google/protobuf/timestamp.proto";

package stellarstation.api.v1.groundstation;

option go_package = "github.com/infostellarinc/go-stellarstation/api/v1/groundstation";

option java_multiple_files = true;
option java_outer_classname = "PlanExecution";
option java_package = "com.stellarstation.api.v1.groundstation";

// A life cycle event of a plan.
message PlanExecutionEvent {
  oneof Event {
    // The plan is beginning. Sent at the plan's `start_time'.
    PlanWillBegin begin = 2;

    // The plan has ended. Sent when the plan's execution state is determined.
    PlanDidEnd end = 3;
  }
}

// An event notifying a plan is beginning.
message PlanWillBegin {
  // The desired state of the ground station's devices at each point of time between AOS and LOS.
  repeated DeviceState state = 1;
}

// An event notifying a plan has ended.
message PlanDidEnd {
  // The execution status of the plan.
  PlanExecutionStatus status = 1;
}

// A state of the ground station's devices.
message DeviceState {
  // The time the state is for.
  google.protobuf.Timestamp time = 1;

  // The rotator angle.
  Angle rotator_angle = 2;

  // The uplink frequency to use, in Hz. Doppler shift is not applied. You can derive the Doppler
  // shifted frequency using this equation:
  //   shifted = freq * (1.0 + range_rage / speed_of_light) where speed_of_light is 299792458.0 m/s.
  uint64 uplink_frequency_hz = 3;

  // The downlink frequency to use, in Hz. Dopplier shift is not applied. You can derive the Doppler
  // shifted frequency using this equation:
  //   shifted = freq * (1.0 - range_rage / speed_of_light) where speed_of_light is 299792458.0 m/s.
  uint64 downlink_frequency_hz = 4;

  // The range rate (change rate of distance) of the tracked satellite.
  double range_rate = 5;
}

// An az/el angle.
message Angle {
  // The azimuth.
  double azimuth = 1;

  // The elevation.
  double elevation = 2;
}

// Execution status of a plan.
enum PlanExecutionStatus {
  // The plan finished successfully.
  SUCCESSFUL = 0;

  // The plan failed.
  FAILED = 1;
}
