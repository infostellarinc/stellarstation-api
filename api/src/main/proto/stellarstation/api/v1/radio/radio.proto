/*
 * Copyright 2019 Infostellar, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package stellarstation.api.v1.radio;

option go_package = "github.com/infostellarinc/go-stellarstation/api/v1/radio";

option java_multiple_files = true;
option java_outer_classname = "RadioProto";
option java_package = "com.stellarstation.api.v1.radio";

// Messages for modeling radio device (e.g., receivers, transmitters) configuration in API messages.

// A radio device for RF communication. Usually, a satellite will have one or more radio devices for
// communicating with the ground and a ground station will have one or more radio devices for
// communicating with the satellite. Such devices may not actually correspond to actual hardware
// devices, i.e., in the case of Software Defined Radio (SDR).
message RadioDeviceConfiguration {
  // The center frequency of the device, in Hz.
  uint64 center_frequency_hz = 1;

  // The type of modulation used by this radio device.
  Modulation modulation = 2;

  // The bitrate used during modulation.
  uint64 bitrate = 3;

  // The protocol used by this device when doing RF communication. If unset, the device is only
  // demodulating / modulating without applying any higher-level communication protocol.
  CommunicationProtocol protocol = 4;
}

// A communication protocol used with a radio device. These must contain all the parameters
// needed to configure the device for use either in transmission or reception.
message CommunicationProtocol {
  oneof Framing {
    // AX.25 protocol settings.
    AX25 ax25 = 1;

    // CCSDS transfer frame settings.
    CCSDSTransferFrame ccsds = 2;

    // Bitstream framing settings.
    Bitstream bitstream = 3;

    // AX 100 ASM + Golay mode.
    ASMGolay asm_golay = 4;
  }
}

// CCSDS-specific convolutional coding parameters.
// Code rate (r): 1/2
// Constraint length (K): 7
// Connection vectors:
//   G1 = 1111001
//   G2 = 1011011
message CCSDSConvolutionalCodingParams {
  // Polynomial inversion.
  enum PolynomialInversion {
    // CCSDS transfer frame with normal phase rotation.
    G1_G2 = 0;

    // CCSDS transfer frame with inverted phase rotation.
    G1_G2_INVERTED = 1;

    // G2-inverted G1.
    G2_INVERTED_G1 = 2;

    // G2-G1.
    G2_G1 = 3;
  }

  PolynomialInversion polynomial_inversion = 1;

  // Enum describing different rates for puncturing.
  enum Puncturing {
    // No puncturing.
    OFF = 0;

    // Puncturing rate 2/3.
    PUNCTURE_2_3 = 1;

    // Puncturing rate 3/4.
    PUNCTURE_3_4 = 2;

    // Puncturing rate 4/5.
    PUNCTURE_4_5 = 3;

    // Puncturing rate 5/6.
    PUNCTURE_5_6 = 4;

    // Puncturing rate 6/7.
    PUNCTURE_6_7 = 5;

    // Puncturing rate 7/8.
    PUNCTURE_7_8 = 6;
  }

  // Optional puncturing for convolutional code.
  Puncturing puncturing = 2;
}

// CCSDS-specific scrambling parameters.
// Additive scrambler with pseudo-random sequence generated by the polynomial:
// h(x) = x^8 + x^7 + x^5 + x^3 + 1
message CCSDSScramblingParams {
}

// CCSDS-specific Reed-Solomon parameters.
message CCSDSReedSolomonParams {
  // Enum defining RS Code block length.
  enum BlockLengthType {
    // (255, 223, 16) RS code.
    RS_223_255 = 0;

    // (255, 239, 8) RS code.
    RS_239_255 = 1;
  }

  // Block length type for RS code.
  BlockLengthType block_length_type = 1;
}

// https://public.ccsds.org/Pubs/131x0b3e1.pdf
//
// CCSDS transfer frames allow for a few common variations satellites use such as setting a
// custom synchronization word, inverting the convolutional coding polynomials,
// etc. The sequence of error-correcting codes will be applied as they are
// defined in the CCSDS standard.
message CCSDSTransferFrame {
  // Synchronization word parameters. If unset, synchronization will be enabled
  // using the default CCSDS transfer frame standard synchronization word as in
  // 9.3.5 (Page 9-3) in the specification.
  SynchronizationParams synchronization_params = 1;

  // Convolutional coding parameters. If unset, convolutional coding is disabled.
  CCSDSConvolutionalCodingParams convolutional_coding_params = 2;

  // Scrambling parameters. If unset, scrambling is disabled.
  CCSDSScramblingParams scrambling_params = 3;

  // Reed-Solomon parameters. If unset, Reed-Solomon is disabled.
  CCSDSReedSolomonParams reed_solomon_params = 4;

  // Frame length, in bytes.
  uint32 frame_length_bytes = 5;

  // Line coding used.
  LineCoding line_coding = 6;
}

// ASM+Golay mode for GOM Space AX100 radio.
// https://gomspace.com/UserFiles/Subsystems/datasheet/gs-ds-nanocom-ax100-33.pdf
message ASMGolay {
  // Synchronization word parameters. If unset, the default synchronization word defined
  // by the AX100 will be used.
  SynchronizationParams synchronization_params = 1;

  // Whether to enable CCSDS scrambling.
  bool enable_ccsds_scramble = 2;

  // Whether to enable Reed Solomon error correction.
  bool enable_reed_solomon = 3;

  // Whether to enable CRC checking.
  bool enable_crc_check = 4;
}

// Framing for satellites that don't conform to a particular standard. Usually, only
// a synchronization word and expected frame length can be set.
message Bitstream {
  // Synchronization word parameters. If unset, synchronization is disabled.
  SynchronizationParams synchronization_params = 1;

  // Frame length, in bytes.
  uint32 frame_length_bytes = 2;

  // Line coding used.
  LineCoding line_coding = 3;
}

// Parameters for frame synchronization.
message SynchronizationParams {
  // The actual bytes of the synchronization word. Least significant bit aligned
  // E.g.
  // 15-bit sync word of 0x7fff should be represented as 0111 1111 1111 1111 or [0x7f, 0xff]
  bytes synchronization_word = 1;

  // The length in bits of the synchronization word.
  uint32 length_bits = 2;
}

// PACKET communication based on AX.25. https://www.sigidwiki.com/wiki/PACKET.
message AX25 {
  // Whether or not G3RUH scrambling is used.
  bool g3ruh = 1;

  // Destination callsign.
  string destination_callsign = 2;

  // Destination SSID.
  uint32 destination_ssid = 3;

  // Source callsign.
  string source_callsign = 4;

  // Source SSID.
  uint32 source_ssid = 5;
}

// Type of modulation. Modulation is the process of converting binary data (0's and 1's) to
// an analog wave for use in radio communication.
enum Modulation {
  // Indicates modulation is disabled and raw I/Q is being used.
  DISABLED = 0;

  // Frequency Shift Keying. https://en.wikipedia.org/wiki/Frequency-shift_keying
  FSK = 1;

  // Audio Frequency Shift Keying. https://en.wikipedia.org/wiki/Frequency-shift_keying#Audio_FSK
  AFSK = 2;

  // Binary Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying#Binary_phase-shift_keying_(BPSK)
  BPSK = 3;

  // Multiple Frequency Shift Keying. https://en.wikipedia.org/wiki/Multiple_frequency-shift_keying
  MFSK = 4;

  // Quadrature Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying#Quadrature_phase-shift_keying_(QPSK)
  QPSK = 5;

  // 8-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
  PSK8 = 6;

  // 16-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
  PSK16 = 7;

  // 32-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
  PSK32 = 8;

  // 64-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
  PSK64 = 9;

  // 128-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
  PSK128 = 10;

  // 256-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
  PSK256 = 11;


  // Offset Quadrature Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying#Offset_QPSK_(OQPSK)
  OQPSK = 12;


  // 8-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
  QAM8 = 13;

  // 16-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
  QAM16 = 14;

  // 32-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
  QAM32 = 15;

  // 64-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
  QAM64 = 16;

  // 128-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
  QAM128 = 17;

  // 256-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
  QAM256 = 18;


  // Minimum Shift Keying. https://en.wikipedia.org/wiki/Minimum-shift_keying
  MSK = 19;

  // Gaussian Minimum Shift Keying. https://en.wikipedia.org/wiki/Minimum-shift_keying#Gaussian_minimum-shift_keying
  GMSK = 20;


  // Amplitude modulation (generic)
  AM = 21;

  // Frequency modulation (generic)
  FM = 22;

  // Phase modulation (generic)
  PM = 23;
}

// Line coding applied during modulation. Line coding is the technique for modeling binary 0 and 1
// within a modulated waveform.
enum LineCoding {
  // Non-return-to-zero level.
  // https://en.wikipedia.org/wiki/Non-return-to-zero
  NRZ_L = 0;

  // Non-return-to-zero mark (i.e., differential encoding).
  // https://en.wikipedia.org/wiki/Non-return-to-zero
  NRZ_M = 1;

  // Non-return-to-zero space (i.e., non-differential-encoding).
  // https://en.wikipedia.org/wiki/Non-return-to-zero
  NRZ_S = 2;

  // Differential non-return-to-zero.
  // https://en.wikipedia.org/wiki/Return-to-zero
  DNRZ = 3;

  // Bipolar return-to-zero level.
  // https://en.wikipedia.org/wiki/Bipolar_encoding
  BP_L = 4;

  // Bipolar return-to-zero mark (i.e., differential encoding).
  // https://en.wikipedia.org/wiki/Bipolar_encoding
  BP_M = 5;

  // Bipolar return-to-zero space (i.e., non-differential encoding).
  // https://en.wikipedia.org/wiki/Bipolar_encoding
  BP_S = 6;
}

// Parameters for convolutional coding applied to a bitstream.
// https://en.wikipedia.org/wiki/Convolutional_code
message ConvolutionalCodingParams {
  // The constraint length, `k`, of the code.
  uint32 k = 1;

  // The inverse of the rate of coding, e.g., if rate is `1 / r`, `inverse_rate` is `r`.
  uint32 inverse_rate = 2;

  // The polynomials used for coding. Must have `r` number of elements, where the most significant
  // `k` bits of each element will be used as the polynomial for that index.
  repeated bytes polynomial = 3;
}

// Parameters for scrambling applied to a bitstream.
message ScramblingParams {
  // A type of scrambling.
  enum Type {
    // Additive scrambling.
    ADDITIVE = 0;

    // Multiplicative scrambling.
    MULTIPLICATIVE = 1;
  }
  // The type of scrambling.
  Type type = 1;

  // The length of the shift register, in bits.
  uint32 num_bits = 2;

  // The polynomial mask for the shift register. The most significant `num_bits` bits of `mask` will
  // be used.
  bytes mask = 3;

  // The initial contents of the shift register. The most significant `num_bits` bits of `mask` will
  // be used.
  bytes seed = 4;
}
