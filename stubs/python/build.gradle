/*
 * Copyright 2018 Infostellar, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java' // Required by gradle plugin but we don't generate Java here
apply plugin: 'com.google.protobuf'

protobuf {
    protoc {
        path = "$buildDir/generated/scripts/run_protoc.sh"
    }

    plugins {
        grpc_python {}
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                python { }

                remove java
            }
            task.plugins {
                grpc_python {
                    outputSubDir = 'python'
                }
            }
        }
    }
}

dependencies {
    protobuf project(':api')
}

task fillRunProtocScript {
    doFirst {
        def template = file('src/misc/run_protoc.sh.tmpl').text
        def filled = template.replaceFirst('\\|CONDA_PROFILE_PATH\\|', "${condaRoot}/etc/profile.d/conda.sh")
        def outDir = "$buildDir/generated/scripts"
        mkdir outDir
        def out = file("${outDir}/run_protoc.sh")
        out.text = filled
        out.executable = true
    }
}

afterEvaluate {
    generateProto.dependsOn fillRunProtocScript, ':installPythonTools'

    def packageDir = "$buildDir/publications/python"
    task setupPythonPackage {
        dependsOn generateProto
        doFirst {
            mkdir packageDir

            copy {
                from 'src/misc/python/setup.py'
                from rootProject.file('README.md')
                from rootProject.file('LICENSE')
                into packageDir
            }

            copy {
                from "$buildDir/generated/source/proto/main/python/stellarstation"
                into "$packageDir/stellarstation"
            }

            file("$packageDir/stellarstation/__init__.py").text = "name = 'stellarstation'"
            file("$packageDir/stellarstation/api/__init__.py").text = ''
            file("$packageDir/stellarstation/api/v1/__init__.py").text = ''
        }
    }

    task buildPythonPackage(type: Exec) {
        dependsOn setupPythonPackage

        executable 'bash'
        args '-c', condaCommand('python setup.py sdist bdist_wheel')
        workingDir = packageDir
    }

    task uploadPythonPackage(type: Exec) {
        dependsOn buildPythonPackage

        executable 'bash'
        args '-c', condaCommand('twine upload dist/*')
        workingDir = packageDir
    }
}
