/*
 * Copyright 2018 Infostellar, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
    }
}

plugins {
    id 'java'
    id 'com.github.blindpirate.gogradle'
    id 'com.google.protobuf'
    id 'org.ajoberstar.git-publish'
}

golang {
    packagePath = 'github.com/infostellarinc/go-genproto'
}

dependencies {
    protobuf project(':api')
}

sourceSets {
    main {
        proto {
            // A source directory must be specified for protobuf-gradle-plugin to work, but since we have
            // no sources in this repository we just set it to an empty directory.
            srcDirs = [file('build/proto-src')]
        }
    }
}

protobuf {
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.6.0'
    }
    generateProtoTasks {
        all().each {task ->
            task.plugins {
                go {
                    option 'plugins=grpc'
                }
            }
            task.builtins {
                remove java
            }
        }
    }
    plugins {
        go {
            path = file('.gogradle/project_gopath/bin/protoc-gen-go')
        }
    }
}

gitPublish {
    repoUri = 'git@github.com:infostellarinc/go-stellarstation.git'
    branch = 'master'

    preserve {
        include '**'
        exclude 'api'
    }

    // what to publish, this is a standard CopySpec
    contents {
        from 'build/generated/source/proto/main/go/github.com/infostellarinc/go-stellarstation/api' into 'api'
    }

    commitMessage = 'Refresh API stubs.'
}

task installProtocGoPlugin(type: com.github.blindpirate.gogradle.Go) {
    go 'get -u github.com/golang/protobuf/protoc-gen-go'
}

task installProtoWrap(type: com.github.blindpirate.gogradle.Go) {
    go 'get -u github.com/square/goprotowrap/cmd/protowrap'
}

afterEvaluate {
    tasks.generateProto.dependsOn installProtocGoPlugin, installProtoWrap
    tasks.assemble.dependsOn tasks.generateProto
    tasks.gitPublishCopy.dependsOn tasks.generateProto
    // Set commit user name and email (without this the commit is by 'root').
    tasks.gitPublishReset.doLast {
        File f = file("build/gitPublish/.git/config")
        if (!f.text.contains('sys-admin')) {
            f.append('\n[user]\nname = InfoStellar Inc\nemail = sys-admin@istellar.jp\n')
        }
    }

    // Hack around golang protobuf plugin not supporting compiling multiple packages at the same
    // time. We use the protowrap wrapper which does support it and hack it into the generateProto
    // task.
    def generateProto = tasks.generateProto
    // We need to round-trip through either doFirst or doLast so Closure is converted to Action.
    // We add it to the last and pop it off and insert where we want it.
    generateProto.doLast {
        def protocPath = protobuf.tools.protoc.path
        def protowrapPath = file('.gogradle/project_gopath/bin/protowrap')
        def runProtowrap = file("${buildDir}/scripts/run-protowrap.sh")
        runProtowrap.parentFile.mkdirs()
        runProtowrap.text = """
#!/usr/bin/env sh

${protowrapPath} --protoc_command=${protocPath} \$@
"""
        runProtowrap.executable = true
        project.protobuf.tools.protoc.path = runProtowrap
    }
    def hackProtoWrap = generateProto.actions.pop()
    // HACK(anuraaga): This is dependent on gradle-protobuf-plugin implementation details. Protoc
    // resolution happens here so we insert our hack after it.
    generateProto.actions.addAll(1, hackProtoWrap)

    generateProto.doFirst {
        mkdir file('build/proto-src')
    }
}

// protobuf-gradle-plugin always apply Java plugin, but we don't need it.
tasks.compileJava.enabled = false
tasks.compileTestJava.enabled = false
